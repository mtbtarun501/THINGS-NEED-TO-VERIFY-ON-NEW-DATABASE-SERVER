Replication Breaks  â”€â”€â”€â–º Check SHOW SLAVE STATUS\G
                        â”‚
                        â”œâ”€â–º Is it a minor error? (Duplicate key, Missing row, etc.)
                        â”‚        â”‚
                        â”‚        â”œâ”€â–º Yes â†’ (99% DBA path)
                        â”‚        â”‚       - Investigate error
                        â”‚        â”‚       - Manually fix row/data
                        â”‚        â”‚       - Or use SQL_SLAVE_SKIP_COUNTER
                        â”‚        â”‚       - Restart slave
                        â”‚        â”‚       - Verify replication continues
                        â”‚        â”‚
                        â”‚        â””â”€â–º No â†’ (Major inconsistency / Many errors)
                        â”‚
                        â””â”€â–º (1% DBA path - safest but slowest)
                                - STOP SLAVE
                                - Take fresh mysqldump from master
                                - Restore dump on slave
                                - Reconfigure replication with CHANGE MASTER TO
                                - START SLAVE
                                - Verify status




===================================================================================================
ðŸ”‘ Why this is the 1% DBA approach

Simple and safe â†’ avoids risky manual fixes.

Always works â†’ you get a clean sync.

But costly â†’ slow for large DBs, slave is offline during rebuild.




--------------------------------------------------------------
ðŸ‘‰ This is the playbook beginners rely on.
A 99% DBA (pro) would instead:

Check the specific error,

Fix the inconsistent row (or skip one transaction),

Restart replication without full rebuild.
